This generator generate the rules and training parts (gold) for the C++ implementation.

To generate the training parts (gold), you have to generate the rules somewhere as a file first.

======================================

Argument List:

gr_or_gp -> type=int, -> Generate Rules -- 0, Generate Parts -- 1, generate from conll -- 2
--inputf -> type=str, -> input file, can be the treebank file (in case 0 and 1) or conll file (in case 2) 
--rulef -> type=str, -> the rule file generated by case 0, this file is required at case 1 (generating parts)
--hm -> type=int, -> HORZMARKOV, e.g. 1 or 2...
--vm -> type=int, -> VERTMARKOV, e.g. 1 or 2...
--unary_collapse -> action='store_true', 

======================================

An example usage of this can be:

# Generate rule files
python Generator.py 0 --input /media/lingpenk/Data/PTB/penn_tb_3.0_preprocessed/dev.withtop --hm 1 --vm 1  > rules
or 
python Generator.py 0 --input /media/lingpenk/Data/PTB/penn_tb_3.0_preprocessed/dev.withtop --hm 2 --vm 2 --unary_collapse > rules

# Generate gold parts
python Generator.py 1 --input /media/lingpenk/Data/PTB/penn_tb_3.0_preprocessed/dev.withtop --rulef rules --hm 1 --vm 1  > parts
or
python Generator.py 1 --input /media/lingpenk/Data/PTB/penn_tb_3.0_preprocessed/dev.withtop --rulef rules --hm 2 --vm 2 --unary_collapse > parts

======================================

To generate parts for test conll files (actually, there is no "parts" there, it is POS, words and parent arranged as the training parts format)
python Generator.py 2 --input /media/lingpenk/Data/PTB/penn_tb_3.0_preprocessed/test.conll > test.parts

